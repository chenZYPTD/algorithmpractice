#题目的意思是，给定一个序列，让你判断怎么样(不是创造一个序列完成条件（那就可能是动态规划了）)
#当题目的数据范围很小的时候，你就要考虑暴力枚举了

#BFS--飞机降落
def dfs(u,b):#整个时间是时刻，t是时刻，不是时间段，因为整个
  # 题目都是在用时刻整个概念。t是前一飞机降落到地面的时刻
  flag = [False] * 15    #这个要弄进函数里面且不能全局变量，因为两次访问是独立的，一切都要初始化
  if u==n:
    return True
  for i in range(n):
    if not flag[i]:
      flag[i] = True
      if t[i]+d[i]<b:#即这个飞机坚持不到前一架飞机降落完了
        flag[i]=False
        return False
      b=max(b,t[i])+l[i]#max(t,t[i])包括了两种可能：如果前一飞机降落完但飞机没来，或者是我来了但前一家飞机还没降落。
      if dfs(u+1,b):
        return True
      flag[i]=False
    return False
T=int(input()) #输入询问次数
for i in range(T):#遍历询问次数
  n=int(input())#每次询问的飞机个数
  t = [0] * n # 设定飞机到达时刻列表,实际上[0]*n就行,这里是为了防止越界,下同
  d = [0] * n  # 设定飞机盘旋时间列表
  l = [0] * n  # 设定飞机降落时间列表
  for j in range(n):
    t[j],d[j],l[j]=map(int,input().split())#将每个飞机的三个参数存到对应的位置
  if dfs(0,0):
    print("YES")
  else:
    print("NO")

'''
def dfs(a,b):#先要定义dfs函数,如果写在后面,循环的时候会提示在函数定义之前调用
  global flag #声明全局变量flag 因为这个是在本函数之前定义的
  if a==n:#因为python列表从0开始,所以这里的a表示第n+1架飞机,
          #由后面的代码可知如果能到第n+1架飞机那么第n架飞机肯定是降落完了,满足题意
    flag=True #由于满足题意所以我们把flag置0
    return #返回上一层递归函数,应该是执行上一层函数的16行
  if flag:#如果flag已经置0了,那就不用再执行下面的代码了,直接返回上一层递归
    return 
  for i in range(n):#遍历n架飞机
    if v[i]==0:#这个列表是用来表示第i架飞机有没有降落的,如果为0证明没有降落
      if t[i]+d[i]<b:#根据题意,飞机在天上停的时间是t+d如果这个时间小于b(上一个飞机降落完成的时间),
                    #那么本方案不能执行,直接返回
        flag=False
        return
      v[i]=1#如果没有触发if的话那证明这架飞机能够降落所以就将他置1表示已经降落了, 
      #这样执行下一行代码进行下一个递归函数的时候就不会考虑第i架飞机了
      dfs(a+1,max(b,t[i])+l[i])#这里表示我们要降落下一架飞机,同时时间已经更改,因为飞机降落必须同时满足到达机场
      #(t时刻),和前面的飞机降落完成(b),所以要去二者的最大值,由于当前飞机降落时间为l,所以再加l就是下一个飞机
      #能够降落的时间。#b是b时刻，不是时间段，因为整个题目都是在用时刻整个概念。
      v[i]=0 #当能够执行这段代码时,说明上一行的那个递归函数已经执行完毕(由于函数内部有递归,所以相当与是执行完了
      #这一回降落第i架飞机之后的后面再降落剩余飞机的所有情况),但是并没有return返回,因此证明这一回降落这第i架
      #飞机不能够让所有飞机安全降落,所以这一回不能降落第i架飞机,所以我们要把标记清零,然后考虑这一回降落第i+架
      #飞机的情况
T=int(input()) #输入询问次数
t=[0]*15 #设定飞机到达时刻列表,实际上[0]*n就行,这里是为了防止越界,下同
d=[0]*15#设定飞机盘旋时间列表
l=[0]*15#设定飞机降落时间列表
for i in range(T):#遍历询问次数
  n=int(input())#每次询问的飞机个数
  for j in range(n):
    t[j],d[j],l[j]=map(int,input().split())#将每个飞机的三个参数存到对应的位置
  flag=False#标记是否所有的飞机都可以安全降落
  v=[0]*15#标记飞机是否降落
  dfs(0,0)#调用函数,第一个0表示我们要降落第一架飞机,第二个0表示当前时刻为0
  if flag:
    print('YES')
  else:
    print('NO')
'''